"""Utilities for generating improved resume exports (DOCX & PDF).

The improvement process is heuristic – it restructures the resume with:
- Optional autogenerated Summary
- Explicit Skills section (existing + suggested targets)
- Original content preserved below under Original Experience

Provided functions:
    build_improved_resume_text(resume_text, suggestions, strengths, gaps, role)
    generate_docx(improved_text) -> BytesIO
    generate_pdf(improved_text) -> BytesIO
"""
from __future__ import annotations
from io import BytesIO
from datetime import datetime
from typing import Iterable, Set, Union, List

try:
    import docx  # type: ignore
except Exception:  # pragma: no cover
    docx = None  # type: ignore

try:
    from reportlab.lib.pagesizes import LETTER  # type: ignore
    from reportlab.pdfgen import canvas  # type: ignore
    from reportlab.lib.units import inch  # type: ignore
except Exception:  # pragma: no cover
    LETTER = None  # type: ignore
    canvas = None  # type: ignore


def _make_summary(strengths: Union[Set[str], List[str]], role: str) -> str:
    if not strengths:
        return f"{role} professional seeking to align skills with target role and deliver measurable impact."
    # Convert to list if it's a set
    strengths_list = list(strengths) if isinstance(strengths, set) else strengths
    top = ", ".join(sorted(strengths_list)[:8])
    return f"{role} professional with strengths in {top}; focused on delivering measurable, high-impact results."


def build_improved_resume_text(resume_text: str, suggestions: Iterable[str], strengths: Union[Set[str], List[str]], gaps: Union[Set[str], List[str]], role: str) -> str:
    summary = _make_summary(strengths, role)
    skill_lines = []
    if strengths:
        # Convert to list if it's a set
        strengths_list = list(strengths) if isinstance(strengths, set) else strengths
        skill_lines.append("Core: " + ", ".join(sorted(strengths_list)))
    if gaps:
        # Convert to list if it's a set
        gaps_list = list(gaps) if isinstance(gaps, set) else gaps
        skill_lines.append("Targets: " + ", ".join(sorted(gaps_list)))
    skills_block = "\n".join(skill_lines) if skill_lines else "(Add explicit skills section)"

    sug_block = "\n".join(f"- {s}" for s in suggestions) if suggestions else "(No improvement suggestions generated)"

    improved = [
        "SUMMARY",
        summary,
        "",
        "SKILLS",
        skills_block,
        "",
        "IMPROVEMENT SUGGESTIONS (Generated)",
        sug_block,
        "",
        "ORIGINAL EXPERIENCE (Preserved)",
        resume_text.strip(),
        "",
        f"Generated by Resume Buddy on {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}"
    ]
    return "\n".join(improved)


def generate_docx(improved_text: str) -> BytesIO:
    if not docx:
        raise RuntimeError("python-docx not installed.")
    d = docx.Document()  # type: ignore
    for block in improved_text.split('\n\n'):
        if block.isupper() and len(block.split()) <= 4:
            d.add_heading(block, level=1)
        else:
            for line in block.split('\n'):
                if line.startswith('- '):
                    p = d.add_paragraph()
                    p.style = 'List Bullet'
                    p.add_run(line[2:])
                else:
                    d.add_paragraph(line)
    bio = BytesIO()
    d.save(bio)
    bio.seek(0)
    return bio


def generate_pdf(improved_text: str) -> BytesIO:
    if not canvas or not LETTER:
        raise RuntimeError("reportlab not installed.")
    bio = BytesIO()
    c = canvas.Canvas(bio, pagesize=LETTER)  # type: ignore
    width, height = LETTER  # type: ignore
    margin = 0.75 * inch  # type: ignore
    y = height - margin
    line_height = 12
    for raw_line in improved_text.split('\n'):
        line = raw_line.strip('\r')
        if not line:
            y -= line_height
            continue
        # Page break handling
        if y <= margin:
            c.showPage()
            y = height - margin
        if line.isupper() and len(line.split()) <= 4:
            c.setFont("Helvetica-Bold", 12)
        elif line.startswith('- '):
            c.setFont("Helvetica", 10)
            line = '• ' + line[2:]
        else:
            c.setFont("Helvetica", 10)
        c.drawString(margin, y, line[:150])
        y -= line_height
    c.save()
    bio.seek(0)
    return bio
